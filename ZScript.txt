CLASS Tenderizer : Brutalweapon
{
	Default
	
	{
	Weapon.AmmoUse1 0;
	Weapon.AmmoUse2 0;
	Weapon.AmmoGive1 0;
	Weapon.AmmoGive2 0;
	Weapon.AmmoType1 "SoulAmmo";
	Obituary "%o was tenderized by %k's Hammer.";
    Inventory.PickupSound "BDP/Weapon/Hammer/Select";
	Inventory.Pickupmessage "You got the Tenderizer! (Slot 1)";
	+WEAPON.NOAUTOAIM;
	+WEAPON.NOALERT;
	+WEAPON.EXPLOSIVE;
	brutalweapon.handedness 1;
	Weapon.SelectionOrder 1550;
	Inventory.AltHUDIcon "SRCGA0";
	BrutalWeapon.weight 7;
	}
		action void A_DoHammer(double range, double ang, bool damaging = true)
			{
				Vector3 viewPos = (pos.xy, player.viewz); // player view point
				Vector3 viewDir = (AngleToVector(angle, cos(pitch)), -sin(pitch)); // player view direction
				double maxAngle = cos(ang);

				let it = ThinkerIterator.Create("Actor", STAT_DEFAULT);
						Actor mo;
					while (mo = Actor(it.Next()))
			{
				// get the object's bounding box
				Vector3 rel = mo.PosRelative(CurSector); // account for sector portals
				Vector3 minBox = rel - (mo.radius, mo.radius, 0);
				Vector3 maxBox = rel + (mo.radius, mo.radius, mo.height);

				// get the point on the box nearest the view point
				Vector3 nearest;
				nearest.x = max(minBox.x, min(viewPos.x, maxBox.x));
				nearest.y = max(minBox.y, min(viewPos.y, maxBox.y));
				nearest.z = max(minBox.z, min(viewPos.z, maxBox.z));

				Vector3 dir = nearest - viewPos;
				double dist = dir.Length();
				if (dist > 0)
				{
					if (dist > range) // is it in range?
						continue;

					if (viewDir dot (dir / dist) < maxAngle) // is it within an acceptable angle?
						continue;

					If (!invoker.owner.CheckSight(mo,SF_IGNOREWATERBOUNDARY))
						continue;

				}
					If(mo.species == "marines")
						Continue;
				If(mo.bshootable || mo.bmissile)
				{
					If(mo.bspawnceiling || mo.health < 1 || mo is "headkicking" || mo is "BDECGRASS" || mo is "Brutal_Bloodspot" || mo is "BaseHeadShot")
					{
						Continue;
					}
					
					Vector3 HammerCoords = LevelLocals.SphericalCoords(mo.pos,invoker.owner.pos);
					
					If(mo.bmissile)
					{
						actor PreviousTarget;
						If(mo.target)
						{
							previoustarget = mo.target;
						}
						mo.target = invoker.owner;
						mo.pitch = (mo.pitch - 180);
						mo.angle = (mo.angle - 180);
						mo.vel.x = -mo.vel.x;
						mo.vel.y = -mo.vel.y;
						mo.vel.z = -mo.vel.z;
						If(previousTarget)
						{
							mo.tracer = previoustarget;
						}
					}

					Else
					{

						mo.vel3dfromangle(25,invoker.owner.angleto(mo,TRUE),random(-20,-40));
						If(damaging)
						{
							mo.damagemobj(invoker,invoker.owner,frandom(200,500),"normal",DMG_THRUSTLESS);
							If(!mo.bnoblood)
							{
								vector3 bloodspawn = mo.pos;
								bloodspawn.z = (bloodspawn.z + (mo.height * 0.5));
							
								Mo.spawnblood(bloodspawn,invoker.owner.angleto(mo,TRUE),1);
							}
						}
					}
					
				}
					Continue;

        // grab it
        break;
    }
}
	States
	{

		GrenadeThrowFlash:
			HAMS DCBA 1;
			TNT1 A 24;
			HAMS ABCD 1;//32 in total
			stop;

		FuckYouFlash:
			HAMF ABCD 1; 
			HAMF DEFEDEFEDEFEDEFEDEFEDE 1; //22
			HAMF DCBA 1;
			stop;

		KickingFlash:
			HAMG ABCDDDDDDDDDDDDCBA 1;
			Goto Ready;
		AirKickingFlash:
			HAMG ABCDDDDDDDDDDDDCBA 1; //18
			Goto Ready;

		SlideKickingStart:
			HAMG ABCDD 1;
			HAMG DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD 1 { //39 total
				if (CountInv("Kicking") == 0) {
					return resolvestate("SlideKickingEnd");
				}
				return resolvestate(null);
			}
			Goto Ready;

		SlideKickingEnd:
			HAMG DDDDDDDCBA 1; //10
			Goto Ready;

		SprintOverlay:
			HAMG ABCD 1;
			Wait;

		ReturnfromSprint:
			HAMG DCBA 1;
			Goto ready;

		Select:
			TNT1 A 0;
			TNT1 A 0 A_SetCrosshair(41);
			Goto SelectFirstPersonLegs;
		SelectContinue: "####" A 0 A_GiveInventory("IsPlayingDoxMod",1); 
			UNHG A 0 A_takeinventory("disabletilting",1);
			TNT1 AAAAAAAAAAAAAA 0 A_Raise();
			TNT1 A 1 A_Raise();
		ReturnFromNothing:
			TNT1 A 0 A_SetCrosshair(41);
			TNT1 A 0 A_startSound("BDP/Weapon/Hammer/Select",1);
			TNT1 AAA 0;
			Goto SelectAnimation;

		SelectAnimation:
			TNT1 A 0 A_SetCrosshair(41);
			HAMS ABCD 1 A_WeaponReady(WRF_NOFIRE);
			GOto Ready;
			Deselect: 
				"####" A 0 A_TakeInventory("IsPlayingDoxMod",1);
				"####" A 0 A_ClearOverlays(-2,-2);
				HAMS DCBA 1;
				TNT1 A 0 A_StopSOund(1);
				TNT1 A 0 A_StopSOund(2);
				TNT1 A 0 A_StopSOund(6);
				TNT1 A 0 A_TakeInventory("TossGrenade", 1);
				TNT1 AAAAAAAAAAAAAAAA 0 A_lower();
				TNT1 A 1 A_Lower();
				Wait;
		Ready:
			HAMR A 1 A_weaponreadyDX(WRF_ALLOWRELOAD);
			LOOP;
		Fire:
			
			HAMR A  0 A_startsound("BDP/Weapon/Hammer/Swing",1,0,0.5);
			HAMR BCDEF 1
			{
				A_SetPitch(pitch-7, SPF_INTERPOLATE);
				invoker.owner.A_setangle(invoker.owner.angle-2.5,SPF_INTERPOLATE);
			}
			
			HAMR GGG 1
			{
				A_SetPitch(pitch-2.333, SPF_INTERPOLATE);
				invoker.owner.A_setangle(invoker.owner.angle-0.83333,SPF_INTERPOLATE);
			}
		FireHold:
		//	HAMR G 1;
			//TNT1 A 0 A_refire("firehold");
			HAMR HIJKMO 1
			{
				A_SetPitch(pitch+7, SPF_INTERPOLATE);
				invoker.owner.A_setangle(invoker.owner.angle+2,SPF_INTERPOLATE);
			}

			HAMR A 0
			{
				A_startsound("BDP/Weapon/Hammer/Impact",1);
				Radius_Quake(4,14,0,12,0);
				A_DoHammer(300,90);
				If(countinv("soulammo") < 30)
				{
					A_damageself(20,"desintegrate");
				}
				takeinventory("soulammo",30);
				//A_SetPitch(pitch-7, SPF_INTERPOLATE);
				A_SpawnItemEX("WhiteShockwaveSmall",cos(pitch)*64,0,32 -(sin(pitch)*64));
				A_SpawnItemEX("BDExplosionParticlesRED",cos(pitch)*64,0,32 -(sin(pitch)*64));
				for (int i = 15; i > 0; i--)
				{
					A_fireprojectile("explosionparticleREDveryfast",frandom(-25,25),0,0,0,0,frandom(3,-25));
				
				}
			}
			HAMR PQ 1;
			HAMR RRRRRRRRRRRRRR 1 A_WeaponOffset( random(3,-3) , 32+random(3,-3), 0);
			HAMR R 10;
			//TNT1 A 0 A_refire("firehold");
			HAMB ONMLKJIHEDCBA 1;
			Goto ready;

		Spawn:
			HAMP A 1;
			LOOP;

	}
	
}